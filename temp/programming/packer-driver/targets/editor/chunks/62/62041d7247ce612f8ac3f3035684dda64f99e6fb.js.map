{"version":3,"sources":["file:///D:/cocos/MiniDiceGame/assets/scripts/core/RoundManager.ts"],"names":["RoundManager","calculateResult","constructor","diceService","scoreManager","history","onStateChange","state","currentBet","lastDice","setState","s","clearBet","startBetting","placeBet","bet","amount","Error","balance","roll","dice","calc","change","delta","record","timestamp","Date","toISOString","total","result","win","balanceAfter","add","time","toLocaleTimeString","betType","type"],"mappings":"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","sourcesContent":["// assets/scripts/core/RoundManager.ts\nimport { DiceService } from './DiceService';\nimport { ScoreManager } from './ScoreManager';\nimport { HistoryManager } from './HistoryManager';\nimport { calculateResult } from './ResultCalculator';\nimport { Bet, RoundRecord } from './models';\n\nexport type GameState = 'Idle' | 'Betting' | 'Rolling' | 'Result' | 'Settle';\n\nexport class RoundManager {\n  state: GameState = 'Idle';\n  currentBet: Bet | null = null;\n  lastDice: [number, number, number] | null = null;\n\n  constructor(\n    private diceService: DiceService,\n    private scoreManager: ScoreManager,\n    private history: HistoryManager,\n    private onStateChange?: (s: GameState) => void\n  ) {}\n\n  private setState(s: GameState) {\n    this.state = s;\n    if (this.onStateChange) this.onStateChange(s);\n  }\n\n  // helper để xóa bet (an toàn)\n  clearBet() {\n    this.currentBet = null;\n    // khi clear, ta có thể chuyển về Idle\n    this.setState('Idle');\n  }\n\n  startBetting() {\n    this.clearBet();\n    this.setState('Betting');\n  }\n\n  placeBet(bet: Bet) {\n    if (bet.amount <= 0) throw new Error('Bet must > 0');\n    if (bet.amount > this.scoreManager.balance) throw new Error('Not enough balance');\n\n    this.currentBet = bet;\n    this.setState('Betting');\n  }\n\n  roll() {\n    if (!this.currentBet) throw new Error('No bet placed!');\n\n    // bước 1: chuyển sang Rolling\n    this.setState('Rolling');\n\n    // bước 2: gieo xúc xắc\n    const dice = this.diceService.roll();\n    this.lastDice = dice;\n\n    // bước 3: tính kết quả\n    const calc = calculateResult(dice, this.currentBet);\n\n    // bước 4: chuyển sang Result (UI nên hiển thị WIN/LOSE lúc này)\n    this.setState('Result');\n\n    // bước 5: cập nhật điểm\n    this.scoreManager.change(calc.delta);\n\n    // bước 6: tạo record lịch sử chuẩn (kiểu RoundRecord)\n    const record: RoundRecord = {\n      timestamp: new Date().toISOString(),\n      dice,\n      total: calc.total,\n      bet: this.currentBet,\n      result: calc.win ? 'WIN' : 'LOSE',\n      balanceAfter: this.scoreManager.balance,\n    };\n\n    // bước 7: lưu vào HistoryManager (format history UI khác, HistoryManager chịu)\n    this.history.add({\n      time: new Date().toLocaleTimeString(),\n      dice,\n      total: calc.total,\n      betType: this.currentBet.type,\n      result: calc.win ? 'WIN' : 'LOSE',\n      balance: this.scoreManager.balance,\n    });\n\n    // bước 8: settle hoàn tất\n    this.setState('Settle');\n\n    // reset bet ngay khi vòng kết thúc để tránh reuse\n    this.currentBet = null;\n\n    // trở về Idle để bắt đầu ván tiếp theo\n    this.setState('Idle');\n\n    return { dice, calc };\n  }\n}\n"]}