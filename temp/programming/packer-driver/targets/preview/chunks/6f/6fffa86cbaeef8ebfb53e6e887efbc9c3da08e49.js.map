{"version":3,"sources":["file:///D:/cocos/MiniDiceGame/assets/scripts/ui/GameManager.ts"],"names":["_decorator","Component","Label","Button","EditBox","RandomService","DiceService","ScoreManager","HistoryManager","RoundManager","ccclass","property","GameManager","round","score","history","onLoad","rng","diceService","s","onStateChange","updateBalance","updateHistoryUI","resetInputs","resultLabel","string","balanceLabel","balance","list","histories","lines","reverse","map","h","time","dice","join","total","betType","result","historyLabel","amountInput","totalGuessInput","rollButton","interactable","taiButton","xiuButton","enabled","placeBetTai","placeBet","placeBetXiu","placeBetTotal","type","amt","parseInt","isNaN","guess","amount","totalGuess","e","message","onRoll","currentBet","calc","roll","delta","taiXiu","diceLabel","win","err"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Button, EditBox } from 'cc';\nimport { RandomService } from '../core/RandomService';\nimport { DiceService } from '../core/DiceService';\nimport { ScoreManager } from '../core/ScoreManager';\nimport { HistoryManager } from '../core/HistoryManager';\nimport { RoundManager } from '../core/RoundManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n  @property(Label) balanceLabel: Label = null!;\n  @property(Label) resultLabel: Label = null!;\n  @property(Label) diceLabel: Label = null!;\n  @property(Label) historyLabel: Label = null!;\n  @property(EditBox) amountInput: EditBox = null!;\n  @property(EditBox) totalGuessInput: EditBox = null!;\n  @property(Button) rollButton: Button = null!;\n  @property(Button) taiButton: Button = null!;\n  @property(Button) xiuButton: Button = null!;\n\n  private round!: RoundManager;\n  private score!: ScoreManager;\n  private history!: HistoryManager;\n\n  onLoad() {\n    const rng = new RandomService();\n    const diceService = new DiceService(rng);\n    this.score = new ScoreManager();\n    this.history = new HistoryManager();\n    this.round = new RoundManager(\n      diceService,\n      this.score,\n      this.history,\n      (s: string) => this.onStateChange(s)\n    );\n\n    this.updateBalance();\n    this.updateHistoryUI();\n    this.resetInputs();\n  }\n\n  onStateChange(s: string) {\n    if (s === 'Rolling') {\n      this.resultLabel.string = \"Rolling...\";\n    }\n    if (s === 'Settle') {\n      this.resetInputs();\n    }\n  }\n\n  updateBalance() {\n    this.balanceLabel.string = `Balance: ${this.score.balance}`;\n  }\n\n  updateHistoryUI() {\n    const list = this.history.histories;\n    const lines = [...list].reverse().map(h => {\n      return `${h.time} | ${h.dice.join(',')} | ${h.total} | ${h.betType} | ${h.result} | ${h.balance}`;\n    });\n    this.historyLabel.string = lines.join('\\n');\n  }\n\n  // =============================\n  // Reset Inputs sau mỗi vòng\n  // =============================\n  resetInputs() {\n    this.amountInput.string = '';\n    this.totalGuessInput.string = '';\n    if (this.rollButton) this.rollButton.interactable = false;\n    if (this.taiButton) this.taiButton.interactable = true;\n    if (this.xiuButton) this.xiuButton.interactable = true;\n    if (this.totalGuessInput) this.totalGuessInput.enabled = true;\n  }\n\n  // =============================\n  // Đặt cược\n  // =============================\n  placeBetTai() {\n    this.placeBet('TAI');\n  }\n\n  placeBetXiu() {\n    this.placeBet('XIU');\n  }\n\n  placeBetTotal() {\n    this.placeBet('TOTAL');\n  }\n\n  placeBet(type: 'TAI' | 'XIU' | 'TOTAL') {\n    const amt = parseInt(this.amountInput.string || '0', 10);\n    if (amt <= 0 || isNaN(amt)) {\n      this.resultLabel.string = 'Nhập số điểm hợp lệ!';\n      if (this.rollButton) this.rollButton.interactable = false;\n      return;\n    }\n\n    let guess: number | undefined;\n\n    if (type === 'TOTAL') {\n      guess = parseInt(this.totalGuessInput.string || '0', 10);\n      if (isNaN(guess) || guess < 3 || guess > 18) {\n        this.resultLabel.string = 'Nhập tổng hợp lệ (3-18)!';\n        if (this.rollButton) this.rollButton.interactable = false;\n        return;\n      }\n    }\n\n    try {\n      if (type === 'TOTAL') {\n        this.round.placeBet({ type, amount: amt, totalGuess: guess });\n        // disable 2 nút Tài/Xỉu\n        if (this.taiButton) this.taiButton.interactable = false;\n        if (this.xiuButton) this.xiuButton.interactable = false;\n      } else {\n        this.round.placeBet({ type, amount: amt });\n        // disable ô nhập tổng\n        if (this.totalGuessInput) this.totalGuessInput.enabled = false;\n      }\n\n      this.resultLabel.string = `Đặt ${amt} vào ${type}${type === 'TOTAL' ? ` (Tổng: ${guess})` : ''}`;\n      if (this.rollButton) this.rollButton.interactable = true;\n\n    } catch (e: any) {\n      this.resultLabel.string = `Lỗi: ${e.message}`;\n      if (this.rollButton) this.rollButton.interactable = false;\n    }\n  }\n\n  // =============================\n  // Roll\n  // =============================\n  onRoll() {\n    try {\n      if (!this.round.currentBet) {\n        this.resultLabel.string = 'Bạn chưa đặt cược!';\n        return;\n      }\n\n      const { dice, calc } = this.round.roll();\n\n      const total = calc.total;\n      const delta = calc.delta;\n\n      // Tài/Xỉu text từ tổng\n      let taiXiu = '';\n      if (total >= 11 && total <= 17) taiXiu = 'TAI';\n      else if (total >= 4 && total <= 10) taiXiu = 'XIU';\n      else taiXiu = '—';\n\n      // Hiển thị xúc xắc\n      this.diceLabel.string = `Dice: ${dice.join('/')} (Total: ${total}, ${taiXiu})`;\n\n      // Hiển thị kết quả\n      this.resultLabel.string = calc.win\n        ? `WIN (+${delta})`\n        : `LOSE (${delta})`;\n\n      this.updateBalance();\n      this.updateHistoryUI();\n\n      // Sau Roll xong, reset để chuẩn bị vòng mới\n      this.resetInputs();\n\n    } catch (err: any) {\n      this.resultLabel.string = `Lỗi: ${err.message}`;\n    }\n  }\n}\n"]}